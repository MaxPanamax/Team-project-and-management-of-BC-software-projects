	Курс: «Управление программными проектами»
 	Тема: Введение в управление программными проектами. Работа с 
	требованиями
	1. Назовите основные этапы процесса разработки программного 
	обеспечения.
	2. Назовите основные модели процесса разработки программного 
	обеспечения. Дайте им краткую характеристику.
	ЭТО кодс пр помощи него я конвертировал в PDF)))))
	using Aspose.Cells;
	var workbook = new Workbook("1.Домашняя работа.txt");
            workbook.Save("1.Домашняя работа.pdf");

	1.Задание.
	Ответ:
	В зависимости от вида, масштабов и потребностей проекта определяется порядок разработки. Он будет несколько отличаться для разработки мобильных приложений,
	 встроенного ПО, решений для автоматизации и БД, но общая последовательность действий для создания ПО универсальна.
	1.Дизайн — вторая по важности составляющая продукта после технических характеристик, влияющая на эффективность и скорость взаимодействия пользователя с ним. 
	Требования к дизайну определяются ТЗ — как правило, важны простота, интуитивность и минимальные затраты на совершения действия (достижение результата),
	 а также красота и соответствие стилю компании и (или) продукта.

	2.Код — та часть работы, которая обычно ассоциируется с разработкой ПО как таковой. Важно, чтобы код был в достаточной мере оптимизированным,
	 лаконичным и понятным. Назначаем на подобранные под специфику задания в ТЗ языки специализирующихся на их использовании программистов.

	3.Тестирование. Тестирование в EDISON проводится на каждом этапе разработки ПО, включает множество тестов по плану тестирования, кастомизируемому 
	с учётом специфики проекта на этапе составления технического задания. Результаты тестирования документируются и доступны клиенту в режиме реального
	 времени. Оплата за продукт производится только после прохождения всех видов тестов, в том числе клиентских.

	4.Документирование — процедура, фиксирующая план, процесс и результат разработки программного обеспечения. Включает в себя всю исходную информацию 
	(ТЗ, макеты), планы работ, затрат, тестирования, список задач исполнителей в каждый момент времени, отчеты о работе и так далее. Документация
 	необходима для быстрого и точного выявления ошибок, прозрачности совместной работы, как обязательная юридическая часть договора.

	2.Задание.
	Ответ:
	Эти обобщенные модели не содержат точного описания всех стадий процесса создания ПО. Напротив, они являются полезными абстракциями,
 	помогающими "приложить" различные подходы и технологии к процессу разработки. Кроме того, очевидно, что процесс создания больших
	 систем не является единым, а состоит из множества различных процессов, ведущих к созданию отдельных частей большой системы. Модели 
	создания программного обеспечения.
	1. Каскадная модель. Основные базовые виды деятельности, выполняемые в процессе создания ПО (такие, как разработка спецификации,
	 проектирование и производство, аттестация и модернизация ПО), представляются как отдельные этапы этого процесса.

	2. Эволюционная модель разработки ПО. Здесь последовательно перемежаются этапы формирования требований, разработки ПО и его аттестации.
 	Первоначальная программная система быстро разрабатывается на основе некоторых абстрактных общих требований. Затем они уточняются и
 	детализируются в соответствии с требованиями заказчика. Далее система дорабатывается и аттестуется в соответствии с новыми уточненными
 	требованиями.

	3. Модель формальной разработки систем. Основана на разработке формальной математической спецификации программной системы и преобразовании
	 этой спецификации посредством специальных математических методов в исполняемые программы. Проверка соответствия спецификации и
	 системных компонентов также выполняется математическими методами.

	4. Модель разработки ПО на основе ранее созданных компонентов. Предполагает, что отдельные составные части программной системы уже существуют,
	 т.е. созданы ранее. В этом случае технологический процесс создания ПО основное внимание уделяет интеграции отдельных компонентов в общее целое,
 	а не их созданию.

	Каскадная и эволюционная модели разработки широко используются на практике. Модель формальной разработки систем успешно применялась во
	 многих проектах, но количество организаций-разработчиков, постоянно использующих этот метод, невелико. Использование готовых системных
	 компонентов практикуется повсеместно, но большинство организаций не придерживаются в точности модели разработки ПО на основе ранее
	 созданных компонентов. Вместе с тем этот метод должен получить широкое распространение в XXI столетии, поскольку сборка систем из
 	готовых или ранее использованных компонентов значительно ускоряет разработку ПО.

	Описанные модели процесса создания ПО имеют свои достоинства и недостатки. При создании больших систем, как правило, приходится
	 использовать различные подходы к разработке разных частей системы, т.е. в целом к разработке системы применяются гибридные 
	(смешанные) модели. Поэтому важную роль играет возможность выполнять отдельные процессы разработки подсистем и весь процесс
 	создания ПО итерационно, когда в ответ на изменения требований повторно выполняются определенные этапы создания системы 
	(чаще всего этапы проектирования и кодирования).

	В этом разделе представлены две гибридные итерационные модели, сочетающие несколько различных подходов к разработке ПО
	 и разработанные специально для поддержки итерационного способа создания ПО.

	1. Модель пошаговой разработки, где процессы специфицирования требований, проектирования и написания кода разбиваются
 	на последовательность небольших шагов, которые ведут к созданию ПО.

	2. Спиральная модель разработки, в которой весь процесс создания ПО, от начального эскиза системы до ее конечной реализации,
 	разворачивается по спирали.